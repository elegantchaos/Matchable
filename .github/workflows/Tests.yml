# --------------------------------------------------------------------------------
# This workflow was automatically generated by Action Status 2.0 (405).
# (see https://actionstatus.elegantchaos.com for more details)
# --------------------------------------------------------------------------------

name: Tests

on: [push, pull_request]

jobs:

    macOS-swift-51:
        name: macOS (Swift 5.1)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            sudo xcode-select -s /Applications/Xcode_11.3.1.app
            xcodebuild -version
            swift --version
        - name: Swift Version
          run: swift --version
        - name: Build (Release)
          run: swift build -c release
        - name: Test (Release)
          run: swift test --configuration release -Xswiftc -enable-testing 
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    macOS-swift-nightly:
        name: macOS (Swift Development Nightly)
        runs-on: macOS-latest
        env:
            TOOLCHAINS: swift
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Install Toolchain
          run: |
            branch="development"
            wget --quiet https://swift.org/builds/$branch/xcode/latest-build.yml
            grep "download:" < latest-build.yml > filtered.yml
            sed -e 's/-osx.pkg//g' filtered.yml > stripped.yml
            sed -e 's/:[^:\/\/]/YML="/g;s/$/"/g;s/ *=/=/g' stripped.yml > snapshot.sh
            source snapshot.sh
            echo "Installing Toolchain: $downloadYML"
            wget --quiet https://swift.org/builds/$branch/xcode/$downloadYML/$downloadYML-osx.pkg
            sudo installer -pkg $downloadYML-osx.pkg -target /
            ln -s "/Library/Developer/Toolchains/$downloadYML.xctoolchain/usr/bin" swift-latest
            sudo xcode-select -s /Applications/Xcode_12_beta.app
            swift --version
        - name: Xcode Version
          run: |
            xcodebuild -version
            xcrun swift --version
        - name: Swift Version
          run: swift --version
        - name: Build (Release)
          run: export PATH="swift-latest:$PATH"; swift build -c release
        - name: Test (Release)
          run: export PATH="swift-latest:$PATH"; swift test --configuration release -Xswiftc -enable-testing 
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    linux-swift-51:
        name: Linux (Swift 5.1)
        runs-on: ubuntu-18.04
        container: swift:5.1
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Swift Version
          run: swift --version
        - name: Build (Release)
          run: swift build -c release
        - name: Test (Release)
          run: swift test --configuration release -Xswiftc -enable-testing 
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    linux-swift-nightly:
        name: Linux (Swift Development Nightly)
        runs-on: ubuntu-18.04
        container: swiftlang/swift:nightly
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Swift Version
          run: swift --version
        - name: Build (Release)
          run: swift build -c release
        - name: Test (Release)
          run: swift test --configuration release -Xswiftc -enable-testing 
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    xcode-swift-51:
        name: Xcode (Swift 5.1)
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: |
            sudo xcode-select -s /Applications/Xcode_11.3.1.app
            xcodebuild -version
            swift --version
        - name: XC Pretty
          run: sudo gem install xcpretty-travis-formatter
        - name: Detect Workspace & Scheme (iOS)
          run: |
            WORKSPACE="Matchable.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Matchable-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Matchable-Package"
            else
            SCHEME="Matchable"
            fi
            else
            SCHEME="Matchable-iOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (iOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-iOS-build-release.log | xcpretty
        - name: Test (iOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=iPhone 11" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-iOS-test-release.log | xcpretty
        - name: Detect Workspace & Scheme (tvOS)
          run: |
            WORKSPACE="Matchable.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Matchable-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Matchable-Package"
            else
            SCHEME="Matchable"
            fi
            else
            SCHEME="Matchable-tvOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (tvOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-tvOS-build-release.log | xcpretty
        - name: Test (tvOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=Apple TV" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-tvOS-test-release.log | xcpretty
        - name: Detect Workspace & Scheme (watchOS)
          run: |
            WORKSPACE="Matchable.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Matchable-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Matchable-Package"
            else
            SCHEME="Matchable"
            fi
            else
            SCHEME="Matchable-watchOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (watchOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-watchOS-build-release.log | xcpretty
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs


    xcode-swift-nightly:
        name: Xcode (Swift Development Nightly)
        runs-on: macOS-latest
        env:
            TOOLCHAINS: swift
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Make Logs Directory
          run: mkdir logs
        - name: Install Toolchain
          run: |
            branch="development"
            wget --quiet https://swift.org/builds/$branch/xcode/latest-build.yml
            grep "download:" < latest-build.yml > filtered.yml
            sed -e 's/-osx.pkg//g' filtered.yml > stripped.yml
            sed -e 's/:[^:\/\/]/YML="/g;s/$/"/g;s/ *=/=/g' stripped.yml > snapshot.sh
            source snapshot.sh
            echo "Installing Toolchain: $downloadYML"
            wget --quiet https://swift.org/builds/$branch/xcode/$downloadYML/$downloadYML-osx.pkg
            sudo installer -pkg $downloadYML-osx.pkg -target /
            ln -s "/Library/Developer/Toolchains/$downloadYML.xctoolchain/usr/bin" swift-latest
            sudo xcode-select -s /Applications/Xcode_12_beta.app
            swift --version
        - name: Xcode Version
          run: |
            xcodebuild -version
            xcrun swift --version
        - name: XC Pretty
          run: sudo gem install xcpretty-travis-formatter
        - name: Detect Workspace & Scheme (iOS)
          run: |
            WORKSPACE="Matchable.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Matchable-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Matchable-Package"
            else
            SCHEME="Matchable"
            fi
            else
            SCHEME="Matchable-iOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (iOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-iOS-build-release.log | xcpretty
        - name: Test (iOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=iPhone 11" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-iOS-test-release.log | xcpretty
        - name: Detect Workspace & Scheme (tvOS)
          run: |
            WORKSPACE="Matchable.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Matchable-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Matchable-Package"
            else
            SCHEME="Matchable"
            fi
            else
            SCHEME="Matchable-tvOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (tvOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-tvOS-build-release.log | xcpretty
        - name: Test (tvOS Release)
          run: |
            source "setup.sh"
            echo "Testing workspace $WORKSPACE scheme $SCHEME."
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=Apple TV" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-tvOS-test-release.log | xcpretty
        - name: Detect Workspace & Scheme (watchOS)
          run: |
            WORKSPACE="Matchable.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
            WORKSPACE="."
            GOTPACKAGE=$(xcodebuild -workspace . -list | (grep Matchable-Package || true))
            if [[ $GOTPACKAGE != "" ]]
            then
            SCHEME="Matchable-Package"
            else
            SCHEME="Matchable"
            fi
            else
            SCHEME="Matchable-watchOS"
            fi
            echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
        - name: Build (watchOS Release)
          run: |
            source "setup.sh"
            echo "Building workspace $WORKSPACE scheme $SCHEME."
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-watchOS-build-release.log | xcpretty
        - name: Upload Logs
          uses: actions/upload-artifact@v1
          if: always()
          with:
            name: logs
            path: logs

